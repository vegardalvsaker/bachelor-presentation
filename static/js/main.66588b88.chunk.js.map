{"version":3,"sources":["components/MemberPresentation/styles.module.css","components/GroupPresentation/styles.module.css","components/NavigationBar/styles.module.css","svg/linkedin.svg","svg/github.svg","components/NavigationBar/index.jsx","components/MemberPresentation/index.jsx","components/GroupPresentation/index.jsx","components/Page/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","navstyles","classnames","styles","bgPrimary","Navbar","className","variant","Container","Brand","members","require","MemberPresentation","cardStyles","card","Row","map","member","Col","lg","span","offset","md","key","name","Card","Img","style","borderRadius","src","imgUrl","Body","Header","headerTitle","Text","description","Link","href","linkedInUrl","alt","linkedIn","githubUrl","github","GroupPresentation","jumboStyles","jumbo","Jumbotron","paragraph","Page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,YAAc,8B,mBCA5DD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,UAAY,4B,mBCA5DD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,eAAe,+B,mBCDvED,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,y3FCkB5BC,EAZO,WAClB,IAAMC,EAAYC,IAAWC,IAAOC,UAAW,cAE/C,OACI,kBAACC,EAAA,EAAD,CAAQC,UAAWL,EAAWM,QAAQ,QAClC,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAOI,MAAR,CAAcH,UAAU,YAAW,8C,0ECH7CI,EAAUC,EAAQ,IA4BTC,EA1BY,WACvB,IAAMC,EAAaX,IAAWC,IAAOW,KAAM,aAC3C,OACI,kBAACN,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAKT,UAAU,QACVI,EAAQM,KAAI,SAAAC,GAAM,OACf,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKC,GAAI,EAAGC,IAAKN,EAAOO,MAChD,kBAACC,EAAA,EAAD,CAAMnB,UAAWO,GACb,kBAACY,EAAA,EAAKC,IAAN,CAAUC,MAAO,CAAEC,aAAc,GAAKrB,QAAQ,MAAMsB,IAAKZ,EAAOa,SAChE,kBAACL,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKO,OAAN,CAAa1B,UAAWH,IAAO8B,aAAchB,EAAOO,MACpD,kBAACC,EAAA,EAAKS,KAAN,CAAW5B,UAAU,QAAQW,EAAOkB,aACpC,yBAAK7B,UAAU,eACX,kBAACmB,EAAA,EAAKW,KAAN,CAAWC,KAAMpB,EAAOqB,aAAa,yBAAKC,IAAI,mCAAmCV,IAAKW,OACtF,kBAACf,EAAA,EAAKW,KAAN,CAAWC,KAAMpB,EAAOwB,WAAW,yBAAKF,IAAI,iCAAiCV,IAAKa,iB,yBCFvGC,EAjBW,WACtB,IAAMC,EAAc1C,IAAWC,IAAO0C,MAAO,cAE7C,OACI,6BACI,kBAACC,EAAA,EAAD,CAAWxC,UAAWsC,GAClB,kBAACpC,EAAA,EAAD,KACI,0CACA,uBAAGF,UAAWH,IAAO4C,WAArB,wUCALC,EATF,WACT,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66588b88.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"styles_card__3nnrY\",\"headerTitle\":\"styles_headerTitle__2Japl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbo\":\"styles_jumbo__1cA7X\",\"paragraph\":\"styles_paragraph__PRfQR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgPrimary\":\"styles_bgPrimary__1H9LT\",\"bg-secondary\":\"styles_bg-secondary__m-Rwz\"};","module.exports = __webpack_public_path__ + \"static/media/linkedin.937b5084.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.edc7e894.svg\";","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport styles from \"./styles.module.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport classnames from \"classnames\";\r\n\r\nconst NavigationBar = () => {\r\n    const navstyles = classnames(styles.bgPrimary, 'sticky-top')\r\n\r\n    return (\r\n        <Navbar className={navstyles} variant=\"dark\">\r\n            <Container>\r\n                <Navbar.Brand className=\"mx-auto \"><h3>Brukerfeil</h3></Navbar.Brand>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavigationBar;","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport styles from \"./styles.module.css\";\r\nimport classnames from \"classnames\";\r\nimport linkedIn from \"../../svg/linkedin.svg\";\r\nimport github from \"../../svg/github.svg\";\r\nconst members = require(\"../../memberDetails.json\");\r\n\r\nconst MemberPresentation = () => {\r\n    const cardStyles = classnames(styles.card, 'my-2 mb-4')\r\n    return (\r\n        <Container>\r\n            <Row className=\"mt-4\">\r\n                {members.map(member => (\r\n                    <Col lg={{ span: 4, offset: 2 }} md={6} key={member.name}>\r\n                        <Card className={cardStyles}>\r\n                            <Card.Img style={{ borderRadius: 0 }} variant=\"top\" src={member.imgUrl} />\r\n                            <Card.Body>\r\n                                <Card.Header className={styles.headerTitle}>{member.name}</Card.Header>\r\n                                <Card.Text className=\"mt-2\">{member.description}</Card.Text>\r\n                                <div className=\"text-center\">\r\n                                    <Card.Link href={member.linkedInUrl}><img alt=\"Link to members LinkedIn profile\" src={linkedIn} /></Card.Link>\r\n                                    <Card.Link href={member.githubUrl}><img alt=\"Link to members GitHub profile\" src={github} /></Card.Link>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MemberPresentation;","import React from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Container from \"react-bootstrap/Container\";\r\nimport styles from \"./styles.module.css\";\r\nimport classnames from \"classnames\";\r\n\r\nconst GroupPresentation = () => {\r\n    const jumboStyles = classnames(styles.jumbo, 'text-light');\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron className={jumboStyles}>\r\n                <Container>\r\n                    <h1>Brukerfeil</h1>\r\n                    <p className={styles.paragraph}>Vi er en gjeng på seks kamerater som jobber sammen i gruppe. Gruppen er en sammensveiset gjeng som er glad i teknologi og utvikling.\r\n                        Medlemmene har blandet bakgrunner og erfaringer, men sammen utfyller vi hverandre. Vi har erfaringer ved utviklingsprosjekter med både planlegging- og design,\r\n                    og selve utviklingen. </p>\r\n                </Container>\r\n            </Jumbotron>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GroupPresentation\r\n","import React from \"react\";\r\nimport NavigationBar from \"../NavigationBar\";\r\nimport MemberPresentation from \"../MemberPresentation\";\r\nimport GroupPresentation from \"../GroupPresentation\";\r\n\r\nconst Page = () => {\r\n    return (\r\n        <div>\r\n            <NavigationBar />\r\n            <GroupPresentation />\r\n            <MemberPresentation />\r\n        </div>)\r\n}\r\n\r\nexport default Page;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Page from './components/Page';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Page />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}